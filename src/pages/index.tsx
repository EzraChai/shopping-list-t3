import type { ShoppingItem } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { ItemModal } from "../components/ItemModal";
import { HiX } from "react-icons/hi";

import { trpc } from "../utils/trpc";
import { useQueryClient } from "@tanstack/react-query";

const Home: NextPage = () => {
  const queryClient = useQueryClient();

  const [items, setItems] = useState<ShoppingItem[]>([]);
  const [modalOpen, setModalOpen] = useState<boolean>(false);

  const { data: itemsData, isLoading } = trpc.item.getAllItems.useQuery(
    undefined,
    {
      onSuccess: (itemsData) => {
        setItems(itemsData);
      },
    }
  );

  const deleteItemMutation = trpc.item.deleteItem.useMutation({
    onSuccess() {
      queryClient.invalidateQueries();
    },
  });

  const checkItemMutation = trpc.item.checkItem.useMutation({
    onSuccess() {
      queryClient.invalidateQueries();
    },
  });

  const hello = trpc.example.hello.useQuery({ text: "from Chloe Gan" });

  if (!itemsData || isLoading) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        Loading...
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Shopping List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {modalOpen && (
        <ItemModal setModalOpen={setModalOpen} setItems={setItems} />
      )}
      <main className="mx-auto my-12 max-w-3xl">
        <div className="flex items-baseline justify-between">
          <h2 className="text-2xl font-semibold">My Shopping List</h2>
          <button
            type="button"
            onClick={() => setModalOpen((modalOpenState) => !modalOpenState)}
            className="button rounded-lg bg-violet-700 px-3 py-2 font-bold text-zinc-50 transition hover:bg-violet-500"
          >
            Add shopping item
          </button>
        </div>
        {hello.data?.greeting}
        <div className="mt-4 flex w-full flex-col gap-2">
          {itemsData.map((item) => (
            <div
              key={item.id}
              className="group flex justify-between rounded-lg border-2 border-violet-600 p-2 transition hover:bg-violet-600 hover:text-white"
            >
              <p
                onClick={() =>
                  checkItemMutation.mutate({
                    id: item.id,
                    checked: !item.checked,
                  })
                }
                className={
                  item.checked
                    ? " p-2 text-xl font-semibold text-zinc-500 line-through decoration-2 group-hover:text-zinc-800"
                    : "p-2 text-xl font-semibold hover:cursor-pointer"
                }
              >
                {item.name}
              </p>
              <button
                disabled={deleteItemMutation.isLoading}
                onClick={() => {
                  deleteItemMutation.mutate({
                    id: item.id,
                  });
                }}
                className="p-2"
              >
                <HiX className="text-lg" />
              </button>
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;
